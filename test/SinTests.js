var assert= require("assert"),
    TargetParseContext= require("../lib/TargetParseContext"),
    MetricInfo= require("../lib/MetricInfo"),
    TargetParser= require("../lib/TargetParser"),
    Utils= require("./TestUtils");

describe('TargetParseContext', function(){
  describe('sin', function(){
    it('should produce a sine wave generated by the current time', function(done) {
        var metric=  'sin("The.Time.Series")';
        var ctx= Utils.buildTargetParseContext( metric,  [], {}, [10,100,10], 10, 100 );
        TargetParser.parse( metric )(ctx)
                    .then(function (result) {
                            assert.equal( 1, result.seriesList.length );
                            assert.equal( "The.Time.Series", result.seriesList[0].name );
                            assert.deepEqual( [-0.5440211108893698, 0.9129452507276277, -0.9880316240928618, 0.7451131604793488, -0.26237485370392877, -0.3048106211022167, 0.7738906815578891, -0.9938886539233752, 0.8939966636005579, -0.5063656411097588], result.seriesList[0].data.values );
                            done();
                    })
                    .end();
    })
    it('should produce a sine wave generated by the current time with twce the amplitude', function(done) {
        var metric=  'sin("The.Time.Series",2)';
        var ctx= Utils.buildTargetParseContext( metric,  [], {}, [10,100,10], 10, 100 );
        TargetParser.parse( metric )(ctx)
                    .then(function (result) {
                            assert.equal( 1, result.seriesList.length );
                            assert.equal( "The.Time.Series", result.seriesList[0].name );
                            assert.deepEqual( [-1.0880422217787395, 1.8258905014552553, -1.9760632481857237, 1.4902263209586977, -0.5247497074078575, -0.6096212422044334, 1.5477813631157782, -1.9877773078467504, 1.7879933272011157, -1.0127312822195176], result.seriesList[0].data.values );
                            done();
                    })
                    .end();
    })    
    it('should produce a sine wave generated by the current time (synonym)', function(done) {
        var metric=  'sinFunction("The.Time.Series")';
        var ctx= Utils.buildTargetParseContext( metric,  [], {}, [10,100,10], 10, 100 );
        TargetParser.parse( metric )(ctx)
                    .then(function (result) {
                            assert.equal( 1, result.seriesList.length );
                            assert.equal( "The.Time.Series", result.seriesList[0].name );
                            assert.deepEqual( [-0.5440211108893698, 0.9129452507276277, -0.9880316240928618, 0.7451131604793488, -0.26237485370392877, -0.3048106211022167, 0.7738906815578891, -0.9938886539233752, 0.8939966636005579, -0.5063656411097588], result.seriesList[0].data.values );
                            done();
                    })
                    .end();
    })    
  });
})
